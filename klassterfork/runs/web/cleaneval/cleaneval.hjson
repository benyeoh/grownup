[
    {
        "datasets": {        
            # Read from CleanEval tfrecord dataset
            "ktf.datasets.web.cleaneval.from_tfrecord": {
                "tfrecord_dir": "${os.environ['KTF_TRAIN_DIR']}", # Defined by KTF_TRAIN_DIR environment var in this case
                "expand_binary_class": false,
                "validation_split": 0.1,
                "batch_size": 128,
                "shuffle_size": 4000,
                "config_path": "${os.path.join(os.environ['KTF_TRAIN_DIR'], 'config.json')}"
            }

            # Output here tfrecord dataset is a tuple that looks like: ([adjacency, node features, idx of node to classify], label)
        },
        "model": {
            # Start with a wrapper Sequential model
            "ktf.models.Sequential": {
                "name": "base_model",
                "layers": [
                    # Then define the layers 
                    {
                       # Which contains another Sequential
                       # defining the actual GROWN+UP layers ...
                       "ktf.models.Sequential": {
                            "name": "gcn_trans",
                            "layers": [
                                {
                                    # ... comprised of a GCN with recurrent layers
                                    "ktf.models.networks.RecurrentCGN": {
                                        "name": "gcn",
                                        "layers": [
                                            2,
                                            2,
                                            2,
                                            2,
                                            2,
                                        ],
                                        "debug_self_loops": null,
                                        "num_prelim_blocks": [768, 256],
                                        "hidden_base_feature_size": 256,
                                        "output_feature_size": null,
                                        "use_residuals": true,
                                        "aggregator": "gat_gated",
                                        "normalization": "layer",
                                        "recurrent_cell": "lstm",
                                        "aggregator_activation": "relu",
                                        "recurrent_activation": "tanh",
                                        "dropout": 0.2
                                    }
                                },

                                 # Note that the output of the previous layer is a list of tensors: [adjacency, node features, idx of node to classify]

                                {
                                    # ... and a Transformer network
                                    "ktf.models.networks.TransGraphNet": {
                                        "name": "transgraph",
                                        "num_layers": 5,
                                        "embedding_size": 256,
                                        "num_heads": 4,
                                        "dropout": 0.0
                                    }
                                }

                                # The final output here is a list of tensors: [adjacency, node features, idx of node to classify, cls feature vector (unused)]
                            ]
                         }
                    },

                    {
                        # Since we want to do classification, we append this graph classification layer that takes
                        # the [adj, feats, node idx] input and outputs the classification of the node specified by "node idx"
                        "ktf.models.components.GraphNodeBinaryClassifyHead": {
                            "expand_class": false
                        }
                    }

                ]
            }
        },
        "loss": {
            # Define a binary CE loss with label smoothing and some re-weighting
            "ktf.models.losses.BinaryCrossentropyW": {
                "from_logits": false,
                "label_smoothing": 0.01,
                "class_weights": [1.5, 1.0]
            }
        },
        "metrics": [
            # Define some training metrics which should be self-explanatory
            {
                "tf.keras.metrics.BinaryAccuracy": {}
            },
            {
                "ktf.models.metrics.F1Score": {}
            },
            {
                "tf.keras.metrics.Recall": {}
            },
            {
                "tf.keras.metrics.Precision": {}
            }

        ],
        "optimizer": {
            # Adam optimizer
            "tfa.optimizers.AdamW": {
                "learning_rate": 0.0006,
                "weight_decay": 0.0000,
            }
        },

        "train_loop": {
            # Use a pre-defined Keras train loop wrapper for training
            "ktf.train.KerasTrainLoop": {
                "num_epochs": 30,
                "num_steps": null,
                "valid_freq": "${list(range(8, 40, 1))}", # Do validation at a frequency starting from the 8th epoch every cycle
                "pretrained_weights": [ 
                    [
                        # Load pre-trained weights
                        "gcn_trans",                                # Find the layer named "gcn_trans" ...
                        "runs/web/commoncrawl/pretrain_2008.h5"     # ... and load the weights found in that relative path
                    ]
                    
                ],
                "callbacks": [
                    # If the validation score is higher than before, save the model weights in "filepath"
                    {
                        "tf.keras.callbacks.ModelCheckpoint": {
                            "filepath": "${os.environ.get('KTF_SAVED_WEIGHTS', '/tmp/cleaneval.h5')}",
                            "monitor": "val_f1_score",
                            "save_best_only": true,
                            "save_weights_only": true,
                            "mode": "max",
                            "verbose": 1
                        }
                    },
                ],

                # Disable default saving of model after training
                "save_dir": null
            }
        }
    }
]
